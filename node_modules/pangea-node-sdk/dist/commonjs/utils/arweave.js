"use strict";
// Copyright 2021 Pangea Cyber Corporation
// Author: Pangea Cyber Corporation
Object.defineProperty(exports, "__esModule", { value: true });
exports.getArweavePublishedRoots = void 0;
const ARWEAVE_BASE_URL = "https://arweave.net";
const ARWEAVE_GRAPHQL_URL = `${ARWEAVE_BASE_URL}/graphql`;
const arweaveTransactionUrl = (transactionId) => {
    return `${ARWEAVE_BASE_URL}/${transactionId}/`;
};
const getArweavePublishedRoots = async (treeName, treeSizes, fetchRoot) => {
    if (!treeSizes.length)
        return {};
    const query = `
{
    transactions(
        tags: [
            {
                name: "tree_size"
                values: [${treeSizes.map((size) => `"${size}"`).join(", ")}]
            },
            {
                name: "tree_name"
                values: ["${treeName}"]
            }
        ]
    ) {
        edges {
            node {
                id
                tags {
                    name
                    value
                }
            }
        }
    }
}
    `;
    const response = await fetch(ARWEAVE_GRAPHQL_URL, {
        method: "POST",
        body: JSON.stringify({ query }),
        headers: {
            accept: "application/json",
            "content-type": "application/json",
        },
    });
    if (!response.ok)
        return {};
    const publishedRoots = {};
    const body = await response.json();
    const edges = body?.data?.transactions?.edges ?? [];
    for (let idx = 0; idx < edges.length; idx++) {
        const edge = edges[idx];
        const nodeId = edge?.node?.id;
        const tags = edge?.node?.tags ?? [];
        const treeSizeTags = tags.filter((tag) => tag?.name === "tree_size");
        if (!treeSizeTags.length)
            continue;
        const treeSize = treeSizeTags[0]?.value;
        const transactionUrl = arweaveTransactionUrl(nodeId);
        const response = await fetch(transactionUrl, { method: "GET" });
        if (!response.ok || response.statusText === "Pending") {
            continue;
        }
        publishedRoots[treeSize] = {
            ...(await response.json()),
            // @ts-expect-error
            transactionId: nodeId,
        };
    }
    for (let idx = 0; idx < treeSizes.length; idx++) {
        const treeSize = treeSizes[idx];
        if (treeSize && !(treeSize in publishedRoots)) {
            const root = await fetchRoot(treeSize).catch((err) => {
                console.log("Failed to fetch server roots", err);
            });
            if (root) {
                publishedRoots[treeSize] = {
                    ...root,
                };
            }
        }
    }
    return publishedRoots;
};
exports.getArweavePublishedRoots = getArweavePublishedRoots;
