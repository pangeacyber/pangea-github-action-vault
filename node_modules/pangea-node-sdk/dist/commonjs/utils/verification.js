"use strict";
// Copyright 2021 Pangea Cyber Corporation
// Author: Pangea Cyber Corporation
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySignature = exports.verifyRecordConsistencyProof = exports.verifyLogConsistencyProof = exports.verifyRecordMembershipProof = exports.verifyLogMembershipProof = void 0;
exports.verifyLogHash = verifyLogHash;
const crypto_js_1 = __importDefault(require("crypto-js"));
const merkle_tools_1 = __importDefault(require("merkle-tools"));
const signer_js_1 = require("./signer.js");
const utils_js_1 = require("./utils.js");
// @ts-ignore
const merkleTools = new merkle_tools_1.default();
function verifyLogHash(envelope, hash) {
    var sha256 = crypto_js_1.default.algo.SHA256.create();
    sha256.update((0, utils_js_1.canonicalizeEnvelope)(envelope));
    const calcHash = sha256.finalize().toString();
    return calcHash == hash;
}
const decodeHash = (value) => {
    return crypto_js_1.default.enc.Hex.parse(value);
};
const hashPair = (hash1, hash2) => {
    var sha256 = crypto_js_1.default.algo.SHA256.create();
    sha256.update(hash1);
    sha256.update(hash2);
    return sha256.finalize().toString();
};
const decodeProof = (data) => {
    const proof = [];
    data.split(",").forEach((item) => {
        const parts = item.split(":");
        proof.push({
            side: parts[0] == "l" ? "left" : "right",
            nodeHash: decodeHash(parts[1] || ""),
        });
    });
    return proof;
};
const constructProof = (data) => {
    if (data === "") {
        return [];
    }
    // @ts-ignore
    const proofs = data.split(",").map((item) => {
        const parts = item.split(":");
        if (parts.length >= 2) {
            const side = parts[0] == "l" ? "left" : "right";
            return {
                [side]: parts[1],
            };
        }
    });
    return proofs;
};
const decodeRootProof = (data) => {
    const rootProof = [];
    data.forEach((item) => {
        const [nodeHash, ...proofData] = item.split(",");
        rootProof.push({
            nodeHash: decodeHash(nodeHash?.split(":")[1] || ""),
            proof: decodeProof(proofData.join(",")),
        });
    });
    return rootProof;
};
const verifyLogProof = (initialNodeHash, rootHash, proofs) => {
    let nodeHash = initialNodeHash;
    for (let idx = 0; idx < proofs.length; idx++) {
        const proofHash = proofs[idx]?.nodeHash || "";
        nodeHash = decodeHash(proofs[idx]?.side === "left"
            ? hashPair(proofHash, nodeHash)
            : hashPair(nodeHash, proofHash));
    }
    return nodeHash.toString() === rootHash.toString();
};
const verifyLogMembershipProof = ({ log, newUnpublishedRootHash, }) => {
    if (!log.hash ||
        log.membership_proof === undefined ||
        newUnpublishedRootHash === undefined) {
        return "none";
    }
    const proofs = constructProof(log.membership_proof);
    return merkleTools.validateProof(
    // @ts-ignore
    proofs, log.hash, newUnpublishedRootHash)
        ? "pass"
        : "fail";
};
exports.verifyLogMembershipProof = verifyLogMembershipProof;
const verifyRecordMembershipProof = ({ record, root, }) => {
    if (!record.hash ||
        record.membership_proof === undefined ||
        root === undefined) {
        return "none";
    }
    const proofs = constructProof(record.membership_proof);
    return merkleTools.validateProof(
    // @ts-ignore
    proofs, record.hash, root.root_hash)
        ? "pass"
        : "fail";
};
exports.verifyRecordMembershipProof = verifyRecordMembershipProof;
const verifyLogConsistencyProof = ({ log, newUnpublishedRoot, prevUnpublishedRoot, }) => {
    if (log.consistency_proof !== undefined &&
        newUnpublishedRoot !== undefined &&
        prevUnpublishedRoot !== undefined) {
        return verifyConsistencyProof({
            newRootEncHash: newUnpublishedRoot,
            prevRootEncHash: prevUnpublishedRoot,
            consistencyProof: log.consistency_proof,
        })
            ? "pass"
            : "fail";
    }
    return "none";
};
exports.verifyLogConsistencyProof = verifyLogConsistencyProof;
const verifyConsistencyProof = ({ newRootEncHash, prevRootEncHash, consistencyProof, }) => {
    if (!newRootEncHash || !prevRootEncHash || !consistencyProof) {
        return false;
    }
    const prevRootHash = decodeHash(prevRootEncHash);
    const newRootHash = decodeHash(newRootEncHash);
    const proofs = decodeRootProof(consistencyProof);
    let rootHash = proofs[0]?.nodeHash || "";
    proofs.forEach((rootProof, idx) => {
        if (idx === 0)
            return;
        rootHash = decodeHash(hashPair(rootProof.nodeHash, rootHash));
    });
    if (rootHash.toString() !== prevRootHash.toString()) {
        return false;
    }
    for (var idx = 0; idx < proofs.length; idx++) {
        const rootProof = proofs[idx];
        if (!rootProof ||
            !verifyLogProof(rootProof.nodeHash, newRootHash, rootProof.proof)) {
            return false;
        }
    }
    return true;
};
const verifyRecordConsistencyProof = ({ publishedRoots, record, }) => {
    // If not published should not verify consistency.
    if (!record.published) {
        return "none";
    }
    const leafIndex = Number(record.leaf_index);
    const newRoot = publishedRoots[leafIndex + 1];
    const prevRoot = publishedRoots[leafIndex];
    if (leafIndex == 0) {
        return "pass";
    }
    if (!newRoot || !prevRoot) {
        return "none";
    }
    return verifyConsistencyProof({
        newRootEncHash: newRoot.root_hash,
        prevRootEncHash: prevRoot.root_hash,
        consistencyProof: newRoot.consistency_proof,
    })
        ? "pass"
        : "fail";
};
exports.verifyRecordConsistencyProof = verifyRecordConsistencyProof;
const verifySignature = (envelope) => {
    // both undefined so "none" verification
    if (envelope?.signature === undefined && envelope?.public_key === undefined) {
        return "none";
    }
    // Just one undefined it's an error, so "fail"
    if (envelope?.signature === undefined || envelope?.public_key === undefined) {
        return "fail";
    }
    let pubKey = envelope.public_key;
    try {
        // Try to parse json for new public_key struct
        // @ts-ignore
        const obj = JSON.parse(pubKey);
        pubKey = obj["key"];
        if (pubKey === undefined) {
            return "fail";
        }
    }
    catch (e) {
        // If fails to parse, it's old format (just public key as string)
        pubKey = envelope.public_key;
    }
    const v = new signer_js_1.Verifier();
    var data = (0, utils_js_1.canonicalizeEvent)(envelope.event);
    return v.verify(data, envelope.signature, pubKey) ? "pass" : "fail";
};
exports.verifySignature = verifySignature;
