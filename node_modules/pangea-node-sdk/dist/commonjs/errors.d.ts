import { AcceptedResult, Audit } from "./types.js";
import { PangeaResponse } from "./response.js";
export declare namespace PangeaErrors {
    interface ErrorField {
        code: string;
        detail: string;
        source: string;
        path?: string;
    }
    class PangeaError extends Error {
        constructor(message: string);
    }
    class ServiceTemporarilyUnavailable extends PangeaError {
        body: string;
        constructor(body: string);
    }
    class AuditError extends PangeaError {
        constructor(message: string);
    }
    class PresignedUploadError extends PangeaError {
        body: string;
        constructor(message: string, body: string);
    }
    class AuditEventError extends AuditError {
        envelope: Audit.EventEnvelope;
        constructor(message: string, envelope: Audit.EventEnvelope);
    }
    interface Errors {
        errors: ErrorField[];
        accepted_result?: AcceptedResult;
    }
    class APIError extends Error {
        response: PangeaResponse<Errors>;
        constructor(message: string, response: PangeaResponse<any>);
        get pangeaResponse(): PangeaResponse<Errors>;
        get summary(): string;
        get errors(): ErrorField[];
        toString(): string;
    }
    class ValidationError extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
    class RateLimiteError extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
    class NotFound extends APIError {
        constructor(url: string, response: PangeaResponse<any>);
    }
    class NoCreditError extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
    class UnauthorizedError extends APIError {
        constructor(serviceName: string, response: PangeaResponse<any>);
    }
    class ServiceNotEnabledError extends APIError {
        constructor(serviceName: string, response: PangeaResponse<any>);
    }
    class MissingConfigID extends APIError {
        constructor(serviceName: string, response: PangeaResponse<any>);
    }
    class ProviderError extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
    class InternalServerError extends APIError {
        constructor(response: PangeaResponse<any>);
    }
    class AcceptedRequestException extends APIError {
        accepted_result?: AcceptedResult;
        request_id: string;
        constructor(response: PangeaResponse<any>);
    }
    class ServiceNotAvailableError extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
    class InvalidPayloadReceived extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
    class ForbiddenVaultOperation extends APIError {
        constructor(message: string, response: PangeaResponse<any>);
    }
}
