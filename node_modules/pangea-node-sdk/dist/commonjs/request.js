"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_buffer_1 = require("node:buffer");
const node_fs_1 = __importDefault(require("node:fs"));
const form_data_encoder_1 = require("form-data-encoder");
const formdata_node_1 = require("formdata-node");
const file_from_path_1 = require("formdata-node/file-from-path");
const promise_retry_1 = __importDefault(require("promise-retry"));
const config_js_1 = __importStar(require("./config.js"));
const errors_js_1 = require("./errors.js");
const response_js_1 = require("./response.js");
const types_js_1 = require("./types.js");
const multipart_js_1 = require("./utils/multipart.js");
const delay = async (ms) => new Promise((resolve) => {
    setTimeout(resolve, ms);
});
class PangeaRequest {
    serviceName;
    token;
    config;
    extraHeaders;
    configID;
    userAgent = "";
    constructor(serviceName, token, config, configID) {
        if (!serviceName)
            throw new Error("A serviceName is required");
        if (!token)
            throw new Error("A token is required");
        this.serviceName = serviceName;
        this.token = token;
        this.config = new config_js_1.default({ ...config });
        this.setCustomUserAgent(config.customUserAgent);
        this.extraHeaders = {};
        this.configID = configID;
    }
    checkConfigID(data) {
        if (this.configID && !data.config_id) {
            data.config_id = this.configID;
        }
    }
    /**
     * `POST` request.
     *
     * @template R Result type.
     * @param endpoint Endpoint path.
     * @param data Request body.
     * @param options Additional options.
     * @returns A `Promise` of the response.
     */
    async post(endpoint, data, options = {}) {
        const url = this.getUrl(endpoint);
        this.checkConfigID(data);
        let response;
        const entry = options.files ? Object.entries(options.files)[0] : null;
        if (options.files && entry) {
            if (data.transfer_method === types_js_1.TransferMethod.POST_URL) {
                response = await this.fullPostPresignedURL(endpoint, data, entry[1]);
            }
            else {
                response = await this.postMultipart(endpoint, data, options.files);
            }
        }
        else {
            const responseType = data.transfer_method === types_js_1.TransferMethod.MULTIPART ? "buffer" : "json";
            const request = {
                headers: this.getHeaders(),
                body: JSON.stringify(data),
                retry: { limit: this.config.requestRetries },
                responseType: responseType,
            };
            response = await this.httpPost(url, request);
        }
        return this.handleHttpResponse(response, options);
    }
    getFilenameFromContentDisposition(contentDispositionHeader) {
        if (contentDispositionHeader === null) {
            return null;
        }
        const contentDisposition = Array.isArray(contentDispositionHeader)
            ? (contentDispositionHeader[0] ?? "")
            : contentDispositionHeader;
        return (0, multipart_js_1.getHeaderField)(contentDisposition, "filename", null);
    }
    getFilenameFromURL(url) {
        return new URL(url).pathname.split("/").pop();
    }
    async downloadFile(url) {
        const response = await this.httpRequest(url, {
            method: "GET",
            retry: { limit: this.config.requestRetries },
        });
        const filename = this.getFilenameFromContentDisposition(response.headers.get("Content-Disposition")) ??
            this.getFilenameFromURL(url) ??
            null ??
            "default_filename";
        const contentTypeHeader = response.headers.get("Content-Type") ?? "";
        let contentType = "application/octet-stream";
        if (Array.isArray(contentTypeHeader)) {
            contentType = contentTypeHeader[0] ?? contentType;
        }
        return new response_js_1.AttachedFile(filename, await response.arrayBuffer(), contentType);
    }
    async postMultipart(endpoint, data, files) {
        const url = this.getUrl(endpoint);
        const form = new formdata_node_1.FormData();
        this.checkConfigID(data);
        form.append("request", new Blob([JSON.stringify(data)], {
            type: "application/json",
        }));
        for (let [name, fileData] of Object.entries(files)) {
            form.append(name, await this.getFileToForm(fileData.file));
        }
        const encoder = new form_data_encoder_1.FormDataEncoder(form);
        const request = {
            headers: {
                ...this.getHeaders(),
                ...encoder.headers,
            },
            body: encoder.encode(),
            retry: { limit: this.config.requestRetries },
        };
        return await this.httpPost(url, request);
    }
    async getFileToForm(file) {
        if (typeof file === "string") {
            return await (0, file_from_path_1.fileFromPath)(file, "file");
        }
        if (node_buffer_1.Buffer.isBuffer(file)) {
            return new Blob([file]);
        }
        return file;
    }
    getFileToBuffer(file) {
        if (typeof file === "string") {
            return node_fs_1.default.readFileSync(file);
        }
        return file;
    }
    async fullPostPresignedURL(endpoint, data, fileData) {
        const response = await this.requestPresignedURL(endpoint, data);
        if (response.success && response.gotResponse) {
            return response;
        }
        if (!response.gotResponse || !response.accepted_result?.post_url) {
            throw new errors_js_1.PangeaErrors.PangeaError("Failed to request post presigned URL");
        }
        const presigned_url = response.accepted_result.post_url;
        const file_details = response.accepted_result?.post_form_data;
        this.postPresignedURL(presigned_url, {
            file: fileData.file,
            file_details: file_details,
            name: "file",
        });
        return response;
    }
    async postPresignedURL(url, fileData) {
        if (!fileData.file_details) {
            throw new errors_js_1.PangeaErrors.PangeaError("file_details should be defined to do a post");
        }
        const form = new formdata_node_1.FormData();
        if (fileData.file_details) {
            for (const [key, value] of Object.entries(fileData.file_details)) {
                form.append(key, value);
            }
        }
        // Right now, only accept the file with name "file"
        form.append("file", await this.getFileToForm(fileData.file), "file");
        const response = await this.httpPost(url, {
            body: form,
            retry: { limit: this.config.requestRetries },
        });
        if (!response.ok) {
            throw new errors_js_1.PangeaErrors.PresignedUploadError(`presigned POST failure: ${response.status}`, JSON.stringify(await response.json()));
        }
    }
    async putPresignedURL(url, fileData) {
        if (fileData.file_details) {
            throw new errors_js_1.PangeaErrors.PangeaError("file_details should be undefined to do a put");
        }
        const response = await this.httpRequest(url, {
            method: "PUT",
            body: this.getFileToBuffer(fileData.file),
            retry: { limit: this.config.requestRetries },
        });
        if (!response.ok) {
            throw new errors_js_1.PangeaErrors.PresignedUploadError(`presigned PUT failure: ${response.status}`, JSON.stringify(await response.json()));
        }
        return;
    }
    async requestPresignedURL(endpoint, data) {
        let acceptedError;
        if (!data.transfer_method) {
            data.transfer_method = types_js_1.TransferMethod.PUT_URL;
        }
        try {
            return await this.post(endpoint, data, {
                pollResultSync: false,
            });
        }
        catch (error) {
            if (!(error instanceof errors_js_1.PangeaErrors.AcceptedRequestException)) {
                throw error;
            }
            else {
                acceptedError = error;
            }
        }
        return await this.pollPresignedURL(acceptedError.response);
    }
    async pollPresignedURL(response) {
        if (response.accepted_result &&
            (response.accepted_result.post_url || response.accepted_result.put_url)) {
            return response;
        }
        let retryCount = 0;
        const start = Date.now();
        let loopResponse = response;
        const requestId = loopResponse.request_id;
        let loopError = new RangeError();
        while (!loopResponse.accepted_result?.post_url &&
            loopResponse.accepted_result?.put_url &&
            !this.reachTimeout(start)) {
            retryCount += 1;
            const waitTime = this.getDelay(retryCount, start);
            await delay(waitTime);
            try {
                loopResponse = await this.pollResult(requestId, false);
                throw new errors_js_1.PangeaErrors.PangeaError("This call should return 202");
            }
            catch (error) {
                if (!(error instanceof errors_js_1.PangeaErrors.AcceptedRequestException)) {
                    throw error;
                }
                else {
                    loopError = error;
                    loopResponse = error.pangeaResponse;
                }
            }
        }
        if (loopResponse.accepted_result?.post_url ||
            loopResponse.accepted_result?.put_url) {
            return loopResponse;
        }
        else {
            throw loopError;
        }
    }
    /** Wrapper around `fetch()` POST with got-like options. */
    async httpPost(url, options) {
        const response = await this.httpRequest(url, {
            method: "POST",
            body: options.body,
            headers: options.headers,
        });
        if (response && response.ok) {
            return response;
        }
        // This MUST throw an error
        this.checkResponse(new response_js_1.PangeaResponse(response, await response.arrayBuffer()));
        // But in case it doesn't...
        return response;
    }
    async httpRequest(url, options) {
        const fetchOptions = {
            duplex: "half",
            method: options.method,
            body: options.body,
            headers: options.headers,
        };
        return await (0, promise_retry_1.default)(async (retry, _attempt) => {
            const response = await fetch(url, fetchOptions);
            // Retry on GET HTTP/404 because the existing result-polling code
            // depends on it. Note that the previous HTTP client, got, did not retry
            // POST requests by default, hence we don't do that here as well.
            if (fetchOptions.method === "GET" && response.status === 404) {
                return retry(response);
            }
            return response;
        }, { retries: options.retry?.limit });
    }
    async handleHttpResponse(response, options = {}) {
        let pangeaResponse = response instanceof response_js_1.PangeaResponse
            ? response
            : new response_js_1.PangeaResponse(response, await response.arrayBuffer());
        if (pangeaResponse.status === "Accepted" &&
            options.pollResultSync !== false) {
            pangeaResponse = await this.handleAsync(pangeaResponse);
        }
        return this.checkResponse(pangeaResponse);
    }
    async get(endpoint, checkResponse = true) {
        const url = this.getUrl(endpoint);
        const response = await this.httpRequest(url, {
            headers: this.getHeaders(),
            method: "GET",
            retry: { limit: this.config.requestRetries },
        });
        const pangeaResponse = new response_js_1.PangeaResponse(response, await response.arrayBuffer());
        return checkResponse ? this.checkResponse(pangeaResponse) : pangeaResponse;
    }
    getDelay(retryCount, start) {
        let delay = retryCount * retryCount * 1000;
        const now = Date.now();
        if (now + delay > start + this.config.pollResultTimeoutMs) {
            delay = start + this.config.pollResultTimeoutMs - now;
        }
        return delay;
    }
    reachTimeout(start) {
        const now = Date.now();
        return start + this.config.pollResultTimeoutMs <= now;
    }
    async pollResult(requestId, checkResponse = true) {
        const path = `request/${requestId}`;
        // eslint-disable-next-line no-await-in-loop
        return await this.get(path, checkResponse);
    }
    async handleAsync(pangeaResponse) {
        if (!this.config.queuedRetryEnabled) {
            return pangeaResponse;
        }
        let retryCount = 0;
        const start = Date.now();
        const requestId = pangeaResponse.request_id;
        while (pangeaResponse.gotResponse?.status === 202 &&
            !this.reachTimeout(start)) {
            retryCount += 1;
            const waitTime = this.getDelay(retryCount, start);
            // eslint-disable-next-line no-await-in-loop
            await delay(waitTime);
            pangeaResponse = await this.pollResult(requestId, false);
        }
        return pangeaResponse;
    }
    setExtraHeaders(headers) {
        this.extraHeaders = { ...headers };
    }
    setCustomUserAgent(customUserAgent) {
        this.config.customUserAgent = customUserAgent;
        this.userAgent = `pangea-node/${config_js_1.version}`;
        if (this.config.customUserAgent) {
            this.userAgent += ` ${this.config.customUserAgent}`;
        }
    }
    getUrl(path) {
        let url;
        if (this.config.domain.startsWith("http://") ||
            this.config.domain.startsWith("https://")) {
            url = `${this.config.domain}/${path}`;
        }
        else {
            const schema = this.config?.insecure === true ? "http://" : "https://";
            if (this.config?.environment === types_js_1.ConfigEnv.LOCAL) {
                url = `${schema}${this.config.domain}/${path}`;
            }
            else {
                url = `${schema}${this.serviceName}.${this.config.domain}/${path}`;
            }
        }
        return url;
    }
    getHeaders() {
        const headers = {};
        const pangeaHeaders = {
            "User-Agent": this.userAgent,
            Authorization: `Bearer ${this.token}`,
        };
        if (Object.keys(this.extraHeaders).length > 0) {
            Object.assign(headers, this.extraHeaders);
        }
        // We want to overwrite extraHeaders if user set some of pangea headers values.
        Object.assign(headers, pangeaHeaders);
        return headers;
    }
    checkResponse(response) {
        if (response.success) {
            return response;
        }
        if (response.gotResponse?.status === 503) {
            throw new errors_js_1.PangeaErrors.ServiceTemporarilyUnavailable(JSON.stringify(response.body));
        }
        switch (response.status) {
            case "ValidationError":
                throw new errors_js_1.PangeaErrors.ValidationError(response.summary, response);
            case "TooManyRequests":
                throw new errors_js_1.PangeaErrors.RateLimiteError(response.summary, response);
            case "NoCredit":
                throw new errors_js_1.PangeaErrors.NoCreditError(response.summary, response);
            case "Unauthorized":
                throw new errors_js_1.PangeaErrors.UnauthorizedError(this.serviceName, response);
            case "ServiceNotEnabled":
                throw new errors_js_1.PangeaErrors.ServiceNotAvailableError(this.serviceName, response);
            case "ProviderError":
                throw new errors_js_1.PangeaErrors.ProviderError(response.summary, response);
            case "MissingConfigIDScope":
            case "MissingConfigID":
                throw new errors_js_1.PangeaErrors.MissingConfigID(this.serviceName, response);
            case "ServiceNotAvailable":
                throw new errors_js_1.PangeaErrors.ServiceNotAvailableError(this.serviceName, response);
            case "InvalidPayloadReceived":
                throw new errors_js_1.PangeaErrors.InvalidPayloadReceived(response.summary, response);
            case "ForbiddenVaultOperation":
                throw new errors_js_1.PangeaErrors.ForbiddenVaultOperation(response.summary, response);
            case "NotFound":
                throw new errors_js_1.PangeaErrors.NotFound(response.gotResponse?.url !== undefined
                    ? response.gotResponse.url.toString()
                    : "", response);
            case "InternalError":
                throw new errors_js_1.PangeaErrors.InternalServerError(response);
            case "Accepted":
                throw new errors_js_1.PangeaErrors.AcceptedRequestException(response);
            default:
                throw new errors_js_1.PangeaErrors.APIError(response.status, response);
        }
    }
}
exports.default = PangeaRequest;
