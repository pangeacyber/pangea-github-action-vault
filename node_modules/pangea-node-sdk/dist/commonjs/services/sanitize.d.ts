import PangeaResponse from "../response.js";
import BaseService from "./base.js";
import PangeaConfig from "../config.js";
import { FileData, Sanitize } from "../types.js";
/** Sanitize API client. */
export declare class SanitizeService extends BaseService {
    /**
     * Creates a new `SanitizeService` with the given Pangea API token and
     * configuration.
     *
     * @param token Pangea API token.
     * @param config Configuration.
     *
     * @example
     * ```js
     * const config = new PangeaConfig({ domain: "pangea_domain" });
     * const sanitize = new SanitizeService("pangea_token", config);
     * ```
     *
     * @summary Sanitize
     */
    constructor(token: string, config: PangeaConfig);
    /**
     * @summary Sanitize
     * @description Apply file sanitization actions according to specified rules.
     * @operationId sanitize_post_v1_sanitize
     * @param request Request parameters.
     * @param fileData Optional file data for when the "source-url" transfer
     * method is used.
     * @param options Additional options.
     * @returns The sanitized file and information on the sanitization that was
     * performed.
     * @example
     * ```ts
     * import { readFile } from "node:fs/promises";
     *
     * const request: Sanitize.SanitizeRequest = {
     *   transfer_method: TransferMethod.POST_URL,
     *   uploaded_file_name: "uploaded_file",
     * };
     * const response = await sanitize.sanitize(
     *   request,
     *   { file: await readFile("/path/to/file.txt"), name: "filename" }
     * );
     * ```
     */
    sanitize(request: Sanitize.SanitizeRequest, fileData?: FileData, options?: Sanitize.Options): Promise<PangeaResponse<Sanitize.SanitizeResult>>;
    /**
     * @summary Sanitize via presigned URL
     * @description Apply file sanitization actions according to specified rules
     * via a [presigned URL](https://pangea.cloud/docs/api/transfer-methods).
     * @operationId sanitize_post_v1_sanitize 2
     * @param request Request parameters.
     * @returns A presigned URL.
     * @example
     * ```ts
     * const request: Sanitize.SanitizeRequest = {
     *   transfer_method: TransferMethod.PUT_URL,
     *   uploaded_file_name: "uploaded_file",
     * };
     * const presignedUrl = await sanitize.requestUploadURL(request);
     *
     * // Upload file to `presignedUrl.accepted_result.put_url`.
     *
     * // Poll for Sanitize's result.
     * const response = await sanitize.pollResult<Sanitize.SanitizeResult>(presignedUrl.request_id);
     * ```
     */
    requestUploadURL(request: Sanitize.SanitizeRequest): Promise<PangeaResponse<Sanitize.SanitizeResult>>;
}
export default SanitizeService;
