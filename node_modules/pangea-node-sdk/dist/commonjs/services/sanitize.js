"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SanitizeService = void 0;
const base_js_1 = __importDefault(require("./base.js"));
const types_js_1 = require("../types.js");
const utils_js_1 = require("../utils/utils.js");
const errors_js_1 = require("../errors.js");
/** Sanitize API client. */
class SanitizeService extends base_js_1.default {
    /**
     * Creates a new `SanitizeService` with the given Pangea API token and
     * configuration.
     *
     * @param token Pangea API token.
     * @param config Configuration.
     *
     * @example
     * ```js
     * const config = new PangeaConfig({ domain: "pangea_domain" });
     * const sanitize = new SanitizeService("pangea_token", config);
     * ```
     *
     * @summary Sanitize
     */
    constructor(token, config) {
        super("sanitize", token, config);
    }
    /**
     * @summary Sanitize
     * @description Apply file sanitization actions according to specified rules.
     * @operationId sanitize_post_v1_sanitize
     * @param request Request parameters.
     * @param fileData Optional file data for when the "source-url" transfer
     * method is used.
     * @param options Additional options.
     * @returns The sanitized file and information on the sanitization that was
     * performed.
     * @example
     * ```ts
     * import { readFile } from "node:fs/promises";
     *
     * const request: Sanitize.SanitizeRequest = {
     *   transfer_method: TransferMethod.POST_URL,
     *   uploaded_file_name: "uploaded_file",
     * };
     * const response = await sanitize.sanitize(
     *   request,
     *   { file: await readFile("/path/to/file.pdf"), name: "filename" }
     * );
     * ```
     */
    sanitize(request, fileData, options = {
        pollResultSync: true,
    }) {
        let fsData = {};
        if (request.transfer_method === types_js_1.TransferMethod.PUT_URL) {
            throw new errors_js_1.PangeaErrors.PangeaError(`${request.transfer_method} not supported in this function. Use getUploadURL() instead.`);
        }
        let files = undefined;
        if (fileData) {
            files = {
                file: fileData,
            };
        }
        const postOptions = {
            pollResultSync: options.pollResultSync,
            files: files,
        };
        if ((!request.transfer_method ||
            request.transfer_method === types_js_1.TransferMethod.POST_URL) &&
            fileData) {
            fsData = (0, utils_js_1.getFileUploadParams)(fileData.file);
        }
        Object.assign(request, fsData);
        return this.post("v1/sanitize", request, postOptions);
    }
    /**
     * @summary Sanitize via presigned URL
     * @description Apply file sanitization actions according to specified rules
     * via a [presigned URL](https://pangea.cloud/docs/api/transfer-methods).
     * @operationId sanitize_post_v1_sanitize 2
     * @param request Request parameters.
     * @returns A presigned URL.
     * @example
     * ```ts
     * const request: Sanitize.SanitizeRequest = {
     *   transfer_method: TransferMethod.PUT_URL,
     *   uploaded_file_name: "uploaded_file",
     * };
     * const presignedUrl = await sanitize.requestUploadURL(request);
     *
     * // Upload file to `presignedUrl.accepted_result.put_url`.
     *
     * // Poll for Sanitize's result.
     * const response = await sanitize.pollResult<Sanitize.SanitizeResult>(presignedUrl.request_id);
     * ```
     */
    async requestUploadURL(request) {
        if (request.transfer_method === types_js_1.TransferMethod.POST_URL &&
            (!request.size || !request.crc32c || !request.sha256)) {
            throw new errors_js_1.PangeaErrors.PangeaError(`When transfer_method is ${request.transfer_method}, crc32c, sha256 and size must be set. Set them or use transfer_method ${types_js_1.TransferMethod.PUT_URL}`);
        }
        return await this.request.requestPresignedURL("v1/sanitize", request);
    }
}
exports.SanitizeService = SanitizeService;
exports.default = SanitizeService;
