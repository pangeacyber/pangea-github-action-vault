import { FileData, PostOptions, TransferMethod } from "./types.js";
import PangeaConfig from "./config.js";
import { AttachedFile, PangeaResponse } from "./response.js";
interface Request extends Object {
    config_id?: string;
    transfer_method?: TransferMethod;
}
declare class PangeaRequest {
    private serviceName;
    private token;
    private config;
    private extraHeaders;
    private configID?;
    private userAgent;
    constructor(serviceName: string, token: string, config: PangeaConfig, configID?: string);
    checkConfigID(data: Request): void;
    /**
     * `POST` request.
     *
     * @template R Result type.
     * @param endpoint Endpoint path.
     * @param data Request body.
     * @param options Additional options.
     * @returns A `Promise` of the response.
     */
    post<R>(endpoint: string, data: Request, options?: PostOptions): Promise<PangeaResponse<R>>;
    private getFilenameFromContentDisposition;
    private getFilenameFromURL;
    downloadFile(url: string): Promise<AttachedFile>;
    private postMultipart;
    private getFileToForm;
    private getFileToBuffer;
    private fullPostPresignedURL;
    postPresignedURL(url: string, fileData: FileData): Promise<void>;
    putPresignedURL(url: string, fileData: FileData): Promise<void>;
    requestPresignedURL(endpoint: string, data: Request): Promise<PangeaResponse<any>>;
    private pollPresignedURL;
    private httpPost;
    private handleHttpResponse;
    get(endpoint: string, checkResponse?: boolean): Promise<PangeaResponse<any>>;
    private getDelay;
    private reachTimeout;
    pollResult(requestId: string, checkResponse?: boolean): Promise<PangeaResponse<any>>;
    private handleAsync;
    setExtraHeaders(headers: any): any;
    setCustomUserAgent(customUserAgent: string | undefined): any;
    getUrl(path: string): string;
    private getHeaders;
    private checkResponse;
}
export default PangeaRequest;
