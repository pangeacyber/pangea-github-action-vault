import { KeyObject } from "node:crypto";
/**
 * Signer class to sign event in AuditService
 */
export declare class Signer {
    privateKey: KeyObject;
    constructor(privateKeyFilename: string);
    /**
     * @summary Sign data with private key and ED25519 algorithm
     * @description Fetch paginated results of a previously executed search
     * @param {String} data - data to be signed
     * @returns {string} - signature encoded in base64
     * @example
     * const signature = signer.sign("This is my message to sign")
     */
    sign(data: string): string;
    /**
     * @summary Get public key of signer
     * @description create public key from signer's private key and return it
     * @returns {string} - public key encoded in base64
     * @example
     * const publicKey = signer.getPublicKey()
     */
    getPublicKey(): string;
    getAlgorithm(): string | undefined;
}
/**
 * Verifier class to check event signature in AuditService
 */
export declare class Verifier {
    /**
     * @summary Verify signature data
     * @description Check if data and signature correspond with public key
     * @param {String} data - data to be verified
     * @param {String} signB64 - base64 encoded signature from data
     * @param {String} publicKeyInput - base64 encoded or pem data public key
     * @returns {String} - True if signature correspond with public key, false otherwise
     * @example
     * const result = verifier.verify("")
     */
    verify(data: string, signB64: string, publicKeyInput: string): boolean;
}
