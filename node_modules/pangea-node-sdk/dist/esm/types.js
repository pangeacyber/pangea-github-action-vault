export var ConfigEnv;
(function (ConfigEnv) {
    ConfigEnv["LOCAL"] = "local";
    ConfigEnv["PRODUCTION"] = "production";
})(ConfigEnv || (ConfigEnv = {}));
export var TransferMethod;
(function (TransferMethod) {
    TransferMethod["MULTIPART"] = "multipart";
    TransferMethod["POST_URL"] = "post-url";
    TransferMethod["PUT_URL"] = "put-url";
    TransferMethod["SOURCE_URL"] = "source-url";
    TransferMethod["DEST_URL"] = "dest-url";
})(TransferMethod || (TransferMethod = {}));
/**
 * Secure Audit interface definitions
 */
export var Audit;
(function (Audit) {
    let DownloadFormat;
    (function (DownloadFormat) {
        /** JSON. */
        DownloadFormat["JSON"] = "json";
        /** CSV. */
        DownloadFormat["CSV"] = "csv";
    })(DownloadFormat = Audit.DownloadFormat || (Audit.DownloadFormat = {}));
})(Audit || (Audit = {}));
export var Redact;
(function (Redact) {
    let RedactType;
    (function (RedactType) {
        RedactType["MASK"] = "mask";
        RedactType["PARTIAL_MASKING"] = "partial_masking";
        RedactType["REPLACEMENT"] = "replacement";
        RedactType["DETECT_ONLY"] = "detect_only";
        RedactType["HASH"] = "hash";
        RedactType["FPE"] = "fpe";
    })(RedactType = Redact.RedactType || (Redact.RedactType = {}));
    let FPEAlphabet;
    (function (FPEAlphabet) {
        FPEAlphabet["NUMERIC"] = "numeric";
        FPEAlphabet["ALPHANUMERICLOWER"] = "alphanumericlower";
        FPEAlphabet["ALPHANUMERIC"] = "alphanumeric";
    })(FPEAlphabet = Redact.FPEAlphabet || (Redact.FPEAlphabet = {}));
    let MaskingType;
    (function (MaskingType) {
        MaskingType["MASK"] = "mask";
        MaskingType["UNMASK"] = "unmask";
    })(MaskingType = Redact.MaskingType || (Redact.MaskingType = {}));
})(Redact || (Redact = {}));
/**
 * Intel services interface definitions
 */
export var Intel;
(function (Intel) {
    let HashType;
    (function (HashType) {
        HashType["SHA256"] = "sha256";
        HashType["SHA1"] = "sha1";
        HashType["SHA512"] = "sha512";
        HashType["NTLM"] = "ntlm";
    })(HashType = Intel.HashType || (Intel.HashType = {}));
    let User;
    (function (User) {
        let Password;
        (function (Password) {
            let PasswordStatus;
            (function (PasswordStatus) {
                PasswordStatus[PasswordStatus["BREACHED"] = 0] = "BREACHED";
                PasswordStatus[PasswordStatus["UNBREACHED"] = 1] = "UNBREACHED";
                PasswordStatus[PasswordStatus["INCONCLUSIVE"] = 2] = "INCONCLUSIVE";
            })(PasswordStatus = Password.PasswordStatus || (Password.PasswordStatus = {}));
        })(Password = User.Password || (User.Password = {}));
    })(User = Intel.User || (Intel.User = {}));
})(Intel || (Intel = {}));
/**
 * Vault services interface definitions
 */
export var Vault;
(function (Vault) {
    let KeyPurpose;
    (function (KeyPurpose) {
        KeyPurpose["SIGNING"] = "signing";
        KeyPurpose["ENCRYPTION"] = "encryption";
        KeyPurpose["JWT"] = "jwt";
        /** Format-preserving encryption. */
        KeyPurpose["FPE"] = "fpe";
    })(KeyPurpose = Vault.KeyPurpose || (Vault.KeyPurpose = {}));
    let AsymmetricAlgorithm;
    (function (AsymmetricAlgorithm) {
        AsymmetricAlgorithm["Ed25519"] = "ED25519";
        AsymmetricAlgorithm["RSA2048_PKCS1V15_SHA256"] = "RSA-PKCS1V15-2048-SHA256";
        AsymmetricAlgorithm["RSA2048_OAEP_SHA256"] = "RSA-OAEP-2048-SHA256";
        AsymmetricAlgorithm["ES256"] = "ES256";
        AsymmetricAlgorithm["ES384"] = "ES384";
        AsymmetricAlgorithm["ES512"] = "ES512";
        AsymmetricAlgorithm["ES256K"] = "ES256K";
        AsymmetricAlgorithm["RSA2048_OAEP_SHA1"] = "RSA-OAEP-2048-SHA1";
        AsymmetricAlgorithm["RSA2048_OAEP_SHA512"] = "RSA-OAEP-2048-SHA512";
        AsymmetricAlgorithm["RSA3072_OAEP_SHA1"] = "RSA-OAEP-3072-SHA1";
        AsymmetricAlgorithm["RSA3072_OAEP_SHA256"] = "RSA-OAEP-3072-SHA256";
        AsymmetricAlgorithm["RSA3072_OAEP_SHA512"] = "RSA-OAEP-3072-SHA512";
        AsymmetricAlgorithm["RSA4096_OAEP_SHA1"] = "RSA-OAEP-4096-SHA1";
        AsymmetricAlgorithm["RSA4096_OAEP_SHA256"] = "RSA-OAEP-4096-SHA256";
        AsymmetricAlgorithm["RSA4096_OAEP_SHA512"] = "RSA-OAEP-4096-SHA512";
        AsymmetricAlgorithm["RSA2048_PSS_SHA256"] = "RSA-PSS-2048-SHA256";
        AsymmetricAlgorithm["RSA3072_PSS_SHA256"] = "RSA-PSS-3072-SHA256";
        AsymmetricAlgorithm["RSA4096_PSS_SHA256"] = "RSA-PSS-4096-SHA256";
        AsymmetricAlgorithm["RSA4096_PSS_SHA512"] = "RSA-PSS-4096-SHA512";
        AsymmetricAlgorithm["RSA"] = "RSA-PKCS1V15-2048-SHA256";
        AsymmetricAlgorithm["Ed25519_DILITHIUM2_BETA"] = "ED25519-DILITHIUM2-BETA";
        AsymmetricAlgorithm["Ed448_DILITHIUM3_BETA"] = "ED448-DILITHIUM3-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_128F_SHAKE256_SIMPLE_BETA"] = "SPHINCSPLUS-128F-SHAKE256-SIMPLE-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_128F_SHAKE256_ROBUST_BETA"] = "SPHINCSPLUS-128F-SHAKE256-ROBUST-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_192F_SHAKE256_SIMPLE_BETA"] = "SPHINCSPLUS-192F-SHAKE256-SIMPLE-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_192F_SHAKE256_ROBUST_BETA"] = "SPHINCSPLUS-192F-SHAKE256-ROBUST-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_256F_SHAKE256_SIMPLE_BETA"] = "SPHINCSPLUS-256F-SHAKE256-SIMPLE-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_256F_SHAKE256_ROBUST_BETA"] = "SPHINCSPLUS-256F-SHAKE256-ROBUST-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_128F_SHA256_SIMPLE_BETA"] = "SPHINCSPLUS-128F-SHA256-SIMPLE-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_128F_SHA256_ROBUST_BETA"] = "SPHINCSPLUS-128F-SHA256-ROBUST-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_192F_SHA256_SIMPLE_BETA"] = "SPHINCSPLUS-192F-SHA256-SIMPLE-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_192F_SHA256_ROBUST_BETA"] = "SPHINCSPLUS-192F-SHA256-ROBUST-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_256F_SHA256_SIMPLE_BETA"] = "SPHINCSPLUS-256F-SHA256-SIMPLE-BETA";
        AsymmetricAlgorithm["SPHINCSPLUS_256F_SHA256_ROBUST_BETA"] = "SPHINCSPLUS-256F-SHA256-ROBUST-BETA";
        AsymmetricAlgorithm["FALCON_1024_BETA"] = "FALCON-1024-BETA";
    })(AsymmetricAlgorithm = Vault.AsymmetricAlgorithm || (Vault.AsymmetricAlgorithm = {}));
    let SymmetricAlgorithm;
    (function (SymmetricAlgorithm) {
        SymmetricAlgorithm["HS256"] = "HS256";
        SymmetricAlgorithm["HS384"] = "HS384";
        SymmetricAlgorithm["HS512"] = "HS512";
        SymmetricAlgorithm["AES128_CFB"] = "AES-CFB-128";
        SymmetricAlgorithm["AES256_CFB"] = "AES-CFB-256";
        SymmetricAlgorithm["AES256_GCM"] = "AES-GCM-256";
        SymmetricAlgorithm["AES128_CBC"] = "AES-CBC-128";
        SymmetricAlgorithm["AES256_CBC"] = "AES-CBC-256";
        SymmetricAlgorithm["AES"] = "AES-CFB-128";
        /** 128-bit encryption using the FF3-1 algorithm. Beta feature. */
        SymmetricAlgorithm["AES128_FF3_1"] = "AES-FF3-1-128-BETA";
        /** 256-bit encryption using the FF3-1 algorithm. Beta feature. */
        SymmetricAlgorithm["AES256_FF3_1"] = "AES-FF3-1-256-BETA";
    })(SymmetricAlgorithm = Vault.SymmetricAlgorithm || (Vault.SymmetricAlgorithm = {}));
    /** Algorithm of an exported public key. */
    let ExportEncryptionAlgorithm;
    (function (ExportEncryptionAlgorithm) {
        /** RSA 4096-bit key, OAEP padding, SHA512 digest. */
        ExportEncryptionAlgorithm["RSA4096_OAEP_SHA512"] = "RSA-OAEP-4096-SHA512";
        ExportEncryptionAlgorithm["RSA4096_NO_PADDING_KEM"] = "RSA-NO-PADDING-4096-KEM";
    })(ExportEncryptionAlgorithm = Vault.ExportEncryptionAlgorithm || (Vault.ExportEncryptionAlgorithm = {}));
    let ItemType;
    (function (ItemType) {
        ItemType["ASYMMETRIC_KEY"] = "asymmetric_key";
        ItemType["SYMMETRIC_KEY"] = "symmetric_key";
        ItemType["SECRET"] = "secret";
        ItemType["PANGEA_TOKEN"] = "pangea_token";
        ItemType["FOLDER"] = "folder";
        ItemType["PANGEA_CLIENT_SECRET"] = "pangea_client_secret";
        ItemType["PANGEA_PLATFORM_CLIENT_SECRET"] = "pangea_platform_client_secret";
    })(ItemType = Vault.ItemType || (Vault.ItemType = {}));
    let ItemState;
    (function (ItemState) {
        ItemState["ENABLED"] = "enabled";
        ItemState["DISABLED"] = "disabled";
    })(ItemState = Vault.ItemState || (Vault.ItemState = {}));
    let ItemVersionState;
    (function (ItemVersionState) {
        ItemVersionState["ACTIVE"] = "active";
        ItemVersionState["DEACTIVATED"] = "deactivated";
        ItemVersionState["SUSPENDED"] = "suspended";
        ItemVersionState["COMPROMISED"] = "compromised";
        ItemVersionState["DESTROYED"] = "destroyed";
        ItemVersionState["INHERITED"] = "inherited";
    })(ItemVersionState = Vault.ItemVersionState || (Vault.ItemVersionState = {}));
    let ItemOrder;
    (function (ItemOrder) {
        ItemOrder["ASC"] = "asc";
        ItemOrder["DESC"] = "desc";
    })(ItemOrder = Vault.ItemOrder || (Vault.ItemOrder = {}));
    let ItemOrderBy;
    (function (ItemOrderBy) {
        ItemOrderBy["TYPE"] = "type";
        ItemOrderBy["CREATED_AT"] = "created_at";
        ItemOrderBy["DESTROYED_AT"] = "destroyed_at";
        ItemOrderBy["PURPOSE"] = "purpose";
        ItemOrderBy["EXPIRATION"] = "expiration";
        ItemOrderBy["LAST_ROTATED"] = "last_rotated";
        ItemOrderBy["NEXT_ROTATION"] = "next_rotation";
        ItemOrderBy["NAME"] = "name";
        ItemOrderBy["FOLDER"] = "folder";
        ItemOrderBy["VERSION"] = "version";
    })(ItemOrderBy = Vault.ItemOrderBy || (Vault.ItemOrderBy = {}));
    /** Character sets for format-preserving encryption. */
    let TransformAlphabet;
    (function (TransformAlphabet) {
        /** Lowercase alphabet (a-z). */
        TransformAlphabet["ALPHA_LOWER"] = "alphalower";
        /** Uppercase alphabet (A-Z). */
        TransformAlphabet["ALPHA_UPPER"] = "alphaupper";
        /** Alphanumeric (a-z, A-Z, 0-9). */
        TransformAlphabet["ALPHANUMERIC"] = "alphanumeric";
        /** Lowercase alphabet with numbers (a-z, 0-9). */
        TransformAlphabet["ALPHANUMERIC_LOWER"] = "alphanumericlower";
        /** Uppercase alphabet with numbers (A-Z, 0-9). */
        TransformAlphabet["ALPHANUMERIC_UPPER"] = "alphanumericupper";
        /** Numeric (0-9). */
        TransformAlphabet["NUMERIC"] = "numeric";
    })(TransformAlphabet = Vault.TransformAlphabet || (Vault.TransformAlphabet = {}));
    let ExportEncryptionType;
    (function (ExportEncryptionType) {
        ExportEncryptionType["ASYMMETRIC"] = "asymmetric";
        ExportEncryptionType["KEM"] = "kem";
    })(ExportEncryptionType = Vault.ExportEncryptionType || (Vault.ExportEncryptionType = {}));
    let Secret;
    (function (Secret) {
        Secret.Algorithm = {
            BASE32: "base32",
        };
    })(Secret = Vault.Secret || (Vault.Secret = {}));
})(Vault || (Vault = {}));
export var AuthN;
(function (AuthN) {
    let IDProvider;
    (function (IDProvider) {
        IDProvider["FACEBOOK"] = "facebook";
        IDProvider["GITHUB"] = "github";
        IDProvider["GOOGLE"] = "google";
        IDProvider["MICROSOFT_ONLINE"] = "microsoftonline";
        IDProvider["PASSWORD"] = "password";
    })(IDProvider = AuthN.IDProvider || (AuthN.IDProvider = {}));
    let ItemOrder;
    (function (ItemOrder) {
        ItemOrder["ASC"] = "asc";
        ItemOrder["DESC"] = "desc";
    })(ItemOrder = AuthN.ItemOrder || (AuthN.ItemOrder = {}));
    let MFAProvider;
    (function (MFAProvider) {
        MFAProvider["TOTP"] = "totp";
        MFAProvider["EMAIL_OTP"] = "email_otp";
        MFAProvider["SMS_OTP"] = "sms_otp";
    })(MFAProvider = AuthN.MFAProvider || (AuthN.MFAProvider = {}));
    let FlowType;
    (function (FlowType) {
        FlowType["SIGNIN"] = "signin";
        FlowType["SIGNUP"] = "signup";
    })(FlowType = AuthN.FlowType || (AuthN.FlowType = {}));
    let TokenType;
    (function (TokenType) {
        TokenType["USER"] = "user";
        TokenType["SERVICE"] = "service";
        TokenType["CLIENT"] = "client";
        TokenType["SESSION"] = "session";
    })(TokenType = AuthN.TokenType || (AuthN.TokenType = {}));
    let Agreements;
    (function (Agreements) {
        let AgreementType;
        (function (AgreementType) {
            AgreementType["EULA"] = "eula";
            AgreementType["PRIVACY_POLICY"] = "privacy_policy";
        })(AgreementType = Agreements.AgreementType || (Agreements.AgreementType = {}));
        let AgreementListOrderBy;
        (function (AgreementListOrderBy) {
            AgreementListOrderBy["ID"] = "id";
            AgreementListOrderBy["CREATED_AT"] = "created_at";
            AgreementListOrderBy["NAME"] = "name";
            AgreementListOrderBy["TEXT"] = "text";
        })(AgreementListOrderBy = Agreements.AgreementListOrderBy || (Agreements.AgreementListOrderBy = {}));
    })(Agreements = AuthN.Agreements || (AuthN.Agreements = {}));
    let Flow;
    (function (Flow) {
        let Choice;
        (function (Choice) {
            Choice["AGREEMENTS"] = "agreements";
            Choice["CAPTCHA"] = "captcha";
            Choice["EMAIL_OTP"] = "email_otp";
            Choice["MAGICLINK"] = "magiclink";
            Choice["PASSWORD"] = "password";
            Choice["PROFILE"] = "profile";
            Choice["PROVISIONAL_ENROLLMENT"] = "provisional_enrollment";
            Choice["RESET_PASSWORD"] = "reset_password";
            Choice["SET_EMAIL"] = "set_mail";
            Choice["SET_PASSWORD"] = "set_password";
            Choice["SMS_OTP"] = "sms_otp";
            Choice["SOCIAL"] = "social";
            Choice["TOTP"] = "totp";
            Choice["VERIFY_EMAIL"] = "verify_email";
        })(Choice = Flow.Choice || (Flow.Choice = {}));
    })(Flow = AuthN.Flow || (AuthN.Flow = {}));
    let User;
    (function (User) {
        let ListOrderBy;
        (function (ListOrderBy) {
            ListOrderBy["ID"] = "id";
            ListOrderBy["CREATED_AT"] = "created_at";
            ListOrderBy["LAST_LOGIN_AT"] = "last_login_at";
            ListOrderBy["EMAIL"] = "email";
        })(ListOrderBy = User.ListOrderBy || (User.ListOrderBy = {}));
        let Invite;
        (function (Invite) {
            let OrderBy;
            (function (OrderBy) {
                OrderBy["ID"] = "id";
                OrderBy["CREATED_AT"] = "created_at";
                OrderBy["TYPE"] = "type";
                OrderBy["EXPIRE"] = "expire";
                OrderBy["CALLBACK"] = "callback";
                OrderBy["STATE"] = "state";
                OrderBy["EMAIL"] = "email";
                OrderBy["INVITER"] = "inviter";
                OrderBy["INVITE_ORG"] = "invite_org";
            })(OrderBy = Invite.OrderBy || (Invite.OrderBy = {}));
        })(Invite = User.Invite || (User.Invite = {}));
    })(User = AuthN.User || (AuthN.User = {}));
})(AuthN || (AuthN = {}));
export var AuthZ;
(function (AuthZ) {
    let ItemOrder;
    (function (ItemOrder) {
        ItemOrder["ASC"] = "asc";
        ItemOrder["DESC"] = "desc";
    })(ItemOrder = AuthZ.ItemOrder || (AuthZ.ItemOrder = {}));
    let TupleOrderBy;
    (function (TupleOrderBy) {
        TupleOrderBy["RESOURCE_NAMESPACE"] = "resource_namespace";
        TupleOrderBy["RESOURCE_ID"] = "resource_id";
        TupleOrderBy["RELATION"] = "relation";
        TupleOrderBy["SUBJECT_NAMESPACE"] = "subject_namespace";
        TupleOrderBy["SUBJECT_ID"] = "subject_id";
        TupleOrderBy["SUBJECT_ACTION"] = "subject_action";
    })(TupleOrderBy = AuthZ.TupleOrderBy || (AuthZ.TupleOrderBy = {}));
})(AuthZ || (AuthZ = {}));
export var Share;
(function (Share) {
    let FileFormat;
    (function (FileFormat) {
        FileFormat["F3G2"] = "3G2";
        FileFormat["F3GP"] = "3GP";
        FileFormat["F3MF"] = "3MF";
        FileFormat["F7Z"] = "7Z";
        FileFormat["A"] = "A";
        FileFormat["AAC"] = "AAC";
        FileFormat["ACCDB"] = "ACCDB";
        FileFormat["AIFF"] = "AIFF";
        FileFormat["AMF"] = "AMF";
        FileFormat["AMR"] = "AMR";
        FileFormat["APE"] = "APE";
        FileFormat["ASF"] = "ASF";
        FileFormat["ATOM"] = "ATOM";
        FileFormat["AU"] = "AU";
        FileFormat["AVI"] = "AVI";
        FileFormat["AVIF"] = "AVIF";
        FileFormat["BIN"] = "BIN";
        FileFormat["BMP"] = "BMP";
        FileFormat["BPG"] = "BPG";
        FileFormat["BZ2"] = "BZ2";
        FileFormat["CAB"] = "CAB";
        FileFormat["CLASS"] = "CLASS";
        FileFormat["CPIO"] = "CPIO";
        FileFormat["CRX"] = "CRX";
        FileFormat["CSV"] = "CSV";
        FileFormat["DAE"] = "DAE";
        FileFormat["DBF"] = "DBF";
        FileFormat["DCM"] = "DCM";
        FileFormat["DEB"] = "DEB";
        FileFormat["DJVU"] = "DJVU";
        FileFormat["DLL"] = "DLL";
        FileFormat["DOC"] = "DOC";
        FileFormat["DOCX"] = "DOCX";
        FileFormat["DWG"] = "DWG";
        FileFormat["EOT"] = "EOT";
        FileFormat["EPUB"] = "EPUB";
        FileFormat["EXE"] = "EXE";
        FileFormat["FDF"] = "FDF";
        FileFormat["FITS"] = "FITS";
        FileFormat["FLAC"] = "FLAC";
        FileFormat["FLV"] = "FLV";
        FileFormat["GBR"] = "GBR";
        FileFormat["GEOJSON"] = "GEOJSON";
        FileFormat["GIF"] = "GIF";
        FileFormat["GLB"] = "GLB";
        FileFormat["GML"] = "GML";
        FileFormat["GPX"] = "GPX";
        FileFormat["GZ"] = "GZ";
        FileFormat["HAR"] = "HAR";
        FileFormat["HDR"] = "HDR";
        FileFormat["HEIC"] = "HEIC";
        FileFormat["HEIF"] = "HEIF";
        FileFormat["HTML"] = "HTML";
        FileFormat["ICNS"] = "ICNS";
        FileFormat["ICO"] = "ICO";
        FileFormat["ICS"] = "ICS";
        FileFormat["ISO"] = "ISO";
        FileFormat["JAR"] = "JAR";
        FileFormat["JP2"] = "JP2";
        FileFormat["JPF"] = "JPF";
        FileFormat["JPG"] = "JPG";
        FileFormat["JPM"] = "JPM";
        FileFormat["JS"] = "JS";
        FileFormat["JSON"] = "JSON";
        FileFormat["JXL"] = "JXL";
        FileFormat["JXR"] = "JXR";
        FileFormat["KML"] = "KML";
        FileFormat["LIT"] = "LIT";
        FileFormat["LNK"] = "LNK";
        FileFormat["LUA"] = "LUA";
        FileFormat["LZ"] = "LZ";
        FileFormat["M3U"] = "M3U";
        FileFormat["M4A"] = "M4A";
        FileFormat["MACHO"] = "MACHO";
        FileFormat["MDB"] = "MDB";
        FileFormat["MIDI"] = "MIDI";
        FileFormat["MKV"] = "MKV";
        FileFormat["MOBI"] = "MOBI";
        FileFormat["MOV"] = "MOV";
        FileFormat["MP3"] = "MP3";
        FileFormat["MP4"] = "MP4";
        FileFormat["MPC"] = "MPC";
        FileFormat["MPEG"] = "MPEG";
        FileFormat["MQV"] = "MQV";
        FileFormat["MRC"] = "MRC";
        FileFormat["MSG"] = "MSG";
        FileFormat["MSI"] = "MSI";
        FileFormat["NDJSON"] = "NDJSON";
        FileFormat["NES"] = "NES";
        FileFormat["ODC"] = "ODC";
        FileFormat["ODF"] = "ODF";
        FileFormat["ODG"] = "ODG";
        FileFormat["ODP"] = "ODP";
        FileFormat["ODS"] = "ODS";
        FileFormat["ODT"] = "ODT";
        FileFormat["OGA"] = "OGA";
        FileFormat["OGV"] = "OGV";
        FileFormat["OTF"] = "OTF";
        FileFormat["OTG"] = "OTG";
        FileFormat["OTP"] = "OTP";
        FileFormat["OTS"] = "OTS";
        FileFormat["OTT"] = "OTT";
        FileFormat["OWL"] = "OWL";
        FileFormat["P7S"] = "P7S";
        FileFormat["PAT"] = "PAT";
        FileFormat["PDF"] = "PDF";
        FileFormat["PHP"] = "PHP";
        FileFormat["PL"] = "PL";
        FileFormat["PNG"] = "PNG";
        FileFormat["PPT"] = "PPT";
        FileFormat["PPTX"] = "PPTX";
        FileFormat["PS"] = "PS";
        FileFormat["PSD"] = "PSD";
        FileFormat["PUB"] = "PUB";
        FileFormat["PY"] = "PY";
        FileFormat["QCP"] = "QCP";
        FileFormat["RAR"] = "RAR";
        FileFormat["RMVB"] = "RMVB";
        FileFormat["RPM"] = "RPM";
        FileFormat["RSS"] = "RSS";
        FileFormat["RTF"] = "RTF";
        FileFormat["SHP"] = "SHP";
        FileFormat["SHX"] = "SHX";
        FileFormat["SO"] = "SO";
        FileFormat["SQLITE"] = "SQLITE";
        FileFormat["SRT"] = "SRT";
        FileFormat["SVG"] = "SVG";
        FileFormat["SWF"] = "SWF";
        FileFormat["SXC"] = "SXC";
        FileFormat["TAR"] = "TAR";
        FileFormat["TCL"] = "TCL";
        FileFormat["TCX"] = "TCX";
        FileFormat["TIFF"] = "TIFF";
        FileFormat["TORRENT"] = "TORRENT";
        FileFormat["TSV"] = "TSV";
        FileFormat["TTC"] = "TTC";
        FileFormat["TTF"] = "TTF";
        FileFormat["TXT"] = "TXT";
        FileFormat["VCF"] = "VCF";
        FileFormat["VOC"] = "VOC";
        FileFormat["VTT"] = "VTT";
        FileFormat["WARC"] = "WARC";
        FileFormat["WASM"] = "WASM";
        FileFormat["WAV"] = "WAV";
        FileFormat["WEBM"] = "WEBM";
        FileFormat["WEBP"] = "WEBP";
        FileFormat["WOFF"] = "WOFF";
        FileFormat["WOFF2"] = "WOFF2";
        FileFormat["X3D"] = "X3D";
        FileFormat["XAR"] = "XAR";
        FileFormat["XCF"] = "XCF";
        FileFormat["XFDF"] = "XFDF";
        FileFormat["XLF"] = "XLF";
        FileFormat["XLS"] = "XLS";
        FileFormat["XLSX"] = "XLSX";
        FileFormat["XML"] = "XML";
        FileFormat["XPM"] = "XPM";
        FileFormat["XZ"] = "XZ";
        FileFormat["ZIP"] = "ZIP";
        FileFormat["ZST"] = "ZST";
    })(FileFormat = Share.FileFormat || (Share.FileFormat = {}));
    let ArchiveFormat;
    (function (ArchiveFormat) {
        ArchiveFormat["TAR"] = "tar";
        ArchiveFormat["ZIP"] = "zip";
    })(ArchiveFormat = Share.ArchiveFormat || (Share.ArchiveFormat = {}));
    let LinkType;
    (function (LinkType) {
        LinkType["UPLOAD"] = "upload";
        LinkType["DOWNLOAD"] = "download";
        LinkType["EDITOR"] = "editor";
    })(LinkType = Share.LinkType || (Share.LinkType = {}));
    let AuthenticatorType;
    (function (AuthenticatorType) {
        AuthenticatorType["EMAIL_OTP"] = "email_otp";
        AuthenticatorType["PASSWORD"] = "password";
        AuthenticatorType["SMS_OTP"] = "sms_otp";
        AuthenticatorType["SOCIAL"] = "social";
    })(AuthenticatorType = Share.AuthenticatorType || (Share.AuthenticatorType = {}));
    let ItemOrder;
    (function (ItemOrder) {
        ItemOrder["ASC"] = "asc";
        ItemOrder["DESC"] = "desc";
    })(ItemOrder = Share.ItemOrder || (Share.ItemOrder = {}));
    let ItemOrderBy;
    (function (ItemOrderBy) {
        ItemOrderBy["ID"] = "id";
        ItemOrderBy["CREATED_AT"] = "created_at";
        ItemOrderBy["NAME"] = "name";
        ItemOrderBy["PARENT_ID"] = "parent_id";
        ItemOrderBy["TYPE"] = "type";
        ItemOrderBy["UPDATED_AT"] = "updated_at";
    })(ItemOrderBy = Share.ItemOrderBy || (Share.ItemOrderBy = {}));
})(Share || (Share = {}));
