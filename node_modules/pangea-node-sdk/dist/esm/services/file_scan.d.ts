import PangeaResponse from "../response.js";
import BaseService from "./base.js";
import PangeaConfig from "../config.js";
import { FileData, FileScan, TransferMethod } from "../types.js";
import PangeaRequest from "../request.js";
export declare class FileScanService extends BaseService {
    /**
     * Creates a new `FileScanService` with the given Pangea API token and
     * configuration.
     *
     * @param token Pangea API token.
     * @param config Configuration.
     *
     * @example
     * ```js
     * const config = new PangeaConfig({ domain: "pangea_domain" });
     * const client = new FileScanService("pangea_token", config);
     * ```
     *
     * @summary File Scan
     */
    constructor(token: string, config: PangeaConfig);
    /**
     * @summary Scan
     * @description Scan a file for malicious content.
     * @operationId file_scan_post_v1_scan
     * @param {FileScan.ScanRequest} request
     * @param {string} filepath
     * @param {FileScan.Options} options
     * @returns {Promise} - A promise representing an async call to the check endpoint
     * @example
     * ```js
     * const request = { verbose: true, raw: true, provider: "crowdstrike" };
     * const response = await client.fileScan(request, "./path/to/file.pdf");
     * ```
     */
    fileScan(request: FileScan.ScanRequest, file?: string | FileData, // This param is optional. It should be null when using the source_url method
    options?: FileScan.Options): Promise<PangeaResponse<FileScan.ScanResult>>;
    requestUploadURL(request: FileScan.ScanRequest, options?: {
        params?: FileScan.ScanFileParams;
    }): Promise<PangeaResponse<FileScan.ScanResult>>;
}
export declare class FileScanUploader {
    protected serviceName: string;
    protected request_: PangeaRequest | undefined;
    constructor();
    private get request();
    uploadFile(url: string, fileData: FileData, options: {
        transfer_method?: TransferMethod;
    }): Promise<void>;
}
