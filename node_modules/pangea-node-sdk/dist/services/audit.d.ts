import PangeaResponse from "../response.js";
import BaseService from "./base.js";
import PangeaConfig from "../config.js";
import { Audit } from "../types.js";
/**
 * AuditService class provides methods for interacting with the Audit Service
 * @extends BaseService
 */
declare class AuditService extends BaseService {
    private publishedRoots;
    private prevUnpublishedRootHash;
    tenantID: string | undefined;
    /**
     * Creates a new `AuditService` with the given Pangea API token and
     * configuration.
     *
     * @param token Pangea API token.
     * @param config Configuration.
     *
     * @example
     * ```js
     * const config = new PangeaConfig({ domain: "pangea_domain" });
     * const audit = new AuditService("pangea_token", config);
     * ```
     *
     * @summary Audit
     */
    constructor(token: string, config: PangeaConfig, tenantID?: string, configID?: string);
    /**
     * @summary Log an entry
     * @description Create a log entry in the Secure Audit Log.
     * @operationId audit_post_v1_log
     * @param event A structured event describing an auditable activity. Supported fields are:
     *   - actor (string): Record who performed the auditable activity.
     *   - action (string): The auditable action that occurred.
     *   - status (string): Record whether or not the activity was successful.
     *   - source (string): Used to record the location from where an activity occurred.
     *   - target (string): Used to record the specific record that was targeted by the auditable activity.
     *   - message (string|object): A message describing a detailed account of what happened.
     *     This can be recorded as free-form text or as a JSON-formatted string.
     *   - new (string|object): The value of a record after it was changed.
     *   - old (string|object): The value of a record before it was changed.
     *   - tenant_id (string): Used to record the tenant associated with this activity.
     * @param options Log options. The following log options are supported:
     *   - verbose (bool): Return a verbose response, including the canonical event hash and received_at time.
     * @returns A promise representing an async call to the /v1/log endpoint.
     * @example
     * ```js
     * const auditData = {
     *   action: "add_employee",
     *   actor: user,
     *   target: data.email,
     *   status: "error",
     *   message: `Resume denied - sanctioned country from ${clientIp}`,
     *   source: "web",
     * };
     * const options = { verbose: true };
     *
     * const response = await audit.log(auditData, options);
     * ```
     */
    log(event: Audit.Event, options?: Audit.LogOptions): Promise<PangeaResponse<Audit.LogResponse>>;
    /**
     * @summary Log multiple entries
     * @description Create multiple log entries in the Secure Audit Log.
     * @operationId audit_post_v2_log
     * @param {Audit.Event[]} events
     * @param {Audit.LogOptions} options
     * @returns {Promise} - A promise representing an async call to the /v2/log endpoint.
     * @example
     * ```js
     * const events = [
     *  { message: "hello world" },
     * ];
     * const options = { verbose: true };
     *
     * const response = await audit.logBulk(events, options);
     * ```
     */
    logBulk(events: Audit.Event[], options?: Audit.LogOptions): Promise<PangeaResponse<Audit.LogBulkResponse>>;
    /**
     * @summary Log multiple entries asynchronously
     * @description Asynchronously create multiple log entries in the Secure Audit Log.
     * @operationId audit_post_v2_log_async
     * @param {Audit.Event[]} events
     * @param {Audit.LogOptions} options
     * @returns {Promise} - A promise representing an async call to the /v2/log_async endpoint.
     * @example
     * ```js
     * const events = [
     *  { message: "hello world" },
     * ];
     * const options = { verbose: true };
     *
     * const response = await audit.logBulkAsync(events, options);
     * ```
     */
    logBulkAsync(events: Audit.Event[], options?: Audit.LogOptions): Promise<PangeaResponse<Audit.LogBulkResponse>>;
    getLogEvent(event: Audit.Event, options: Audit.LogOptions): Audit.LogEvent;
    setRequestFields(data: Audit.LogData, options: Audit.LogOptions): void;
    processLogResponse(result: Audit.LogResponse, options: Audit.LogOptions): void;
    verifyHash(envelope: Audit.EventEnvelope | undefined, hash: string | undefined): void;
    /**
     * @summary Search the log
     * @description Search for events that match the provided search criteria.
     * @operationId audit_post_v1_search
     * @param {String} query - Natural search string; list of keywords with optional
     *   `<option>:<value>` qualifiers. The following optional qualifiers are supported:
     *   - action:
     *   - actor:
     *   - message:
     *   - new:
     *   - old:
     *   - status:
     *   - target:
     * @param {Object} options - Search options. The following search options are supported:
     *   - limit (number): Maximum number of records to return per page.
     *   - start (string): The start of the time range to perform the search on.
     *   - end (string): The end of the time range to perform the search on. All records up to the latest if left out.
     *   - sources (array): A list of sources that the search can apply to. If empty or not provided, matches only the default source.
     * @returns {Promise} - A promise representing an async call to the search endpoint
     * @example
     * ```js
     * const response = await audit.search(
     *   "add_employee:Gumby"
     * );
     * ```
     */
    search(query: string, queryOptions: Audit.SearchParamsOptions, options: Audit.SearchOptions): Promise<PangeaResponse<Audit.SearchResponse>>;
    /**
     * @summary Results of a search
     * @description Fetch paginated results of a previously executed search.
     * @operationId audit_post_v1_results
     * @param {String} id - The id of a successful search
     * @param {number} limit (default 20) - The number of results returned
     * @param {number} offset (default 0) - The starting position of the first returned result
     * @param {boolean} verifyResponse (default false) - Verify consistency and membership proof of every record
     * @returns {Promise} - A promise representing an async call to the results endpoint
     * @example
     * ```js
     * const response = await audit.results(
     *   "pas_sqilrhruwu54uggihqj3aie24wrctakr",
     *   50,
     *   100
     * );
     * ```
     */
    results(id: string, limit: number | undefined, offset: number | undefined, options: Audit.SearchOptions): Promise<PangeaResponse<Audit.ResultResponse>>;
    /**
     * @summary Log streaming endpoint
     * @description This API allows 3rd party vendors (like Auth0) to stream
     * events to this endpoint where the structure of the payload varies across
     * different vendors.
     * @operationId audit_post_v1_log_stream
     * @param data Event data. The exact schema of this will vary by vendor.
     * @returns A Pangea response.
     * @example
     * ```js
     * const data = {
     *   logs: [
     *     {
     *       log_id: "some log id",
     *       data: {
     *         date: "2024-03-29T17:26:50.193Z",
     *         type: "some_type",
     *         description: "Create a log stream",
     *         client_id: "test client ID",
     *         ip: "127.0.0.1",
     *         user_agent: "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0",
     *         user_id: "test user ID",
     *       },
     *     },
     *   ],
     * };
     * const response = await audit.logStream(data);
     * ```
     */
    logStream(data: object): Promise<PangeaResponse<{}>>;
    /**
     * @summary Export from the audit log
     * @description Bulk export of data from the Secure Audit Log, with optional
     * filtering.
     * @operationId audit_post_v1_export
     * @param request Request parameters.
     * @returns A Pangea response with a `request_id` that can be used to fetch
     * the exported results at a later time.
     * @example
     * ```js
     * const exportRes = await auditGeneral.export({ verbose: false });
     *
     * // Export may take several dozens of minutes, so polling for the result
     * // should be done in a loop. That is omitted here for brevity's sake.
     * try {
     *   await auditGeneral.pollResult(exportRes.request_id);
     * } catch (error) {
     *   if (error instanceof PangeaErrors.AcceptedRequestException) {
     *     // Retry later.
     *   }
     * }
     *
     * // Download the result when it's ready.
     * const downloadRes = await auditGeneral.downloadResults({ request_id: exportRes.request_id });
     * downloadRes.result.dest_url;
     * // => https://pangea-runtime.s3.amazonaws.com/audit/xxxxx/search_results_[...]
     * ```
     */
    export(request: Audit.ExportRequest): Promise<PangeaResponse<{}>>;
    /**
     * @summary Tamperproof verification
     * @description Returns current root hash and consistency proof.
     * @operationId audit_post_v1_root
     * @param {number} size - The size of the tree (the number of records)
     * @returns {Promise} - A promise representing an async call to the endpoint
     * @example
     * ```js
     * const response = audit.root(7);
     * ```
     */
    root(size?: number): Promise<PangeaResponse<Audit.RootResult>>;
    /**
     * @summary Download search results
     * @description Get all search results as a compressed (gzip) CSV file.
     * @operationId audit_post_v1_download_results
     * @param request Request parameters.
     * @returns URL where search results can be downloaded.
     * @example
     * ```js
     * const response = await audit.downloadResults({
     *   result_id: "pas_[...]",
     *   format: Audit.DownloadFormat.CSV,
     * });
     * ```
     */
    downloadResults(request: Audit.DownloadRequest): Promise<PangeaResponse<Audit.DownloadResult>>;
    processSearchResponse(response: PangeaResponse<Audit.SearchResponse>, options: Audit.SearchOptions): Promise<PangeaResponse<Audit.SearchResponse>>;
}
export default AuditService;
